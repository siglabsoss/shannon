#include <iostream>
#include "core/poppackethandler.hpp"
#include "core/util.h"

//extern "C" {
#include "dsp/prota/popsparsecorrelate.h"
//}

using namespace std;


namespace pop
{


PopPacketHandler::PopPacketHandler(unsigned notused) : PopSink<uint32_t>("PopPacketHandler", 1)
{

}

void PopPacketHandler::process(const uint32_t* data, size_t size, const PopTimestamp* timestamp_data, size_t timestamp_size)
{
//	cout << "got " << size << " things" << endl;

	// This is the bit sync pattern for FF,33,55
	uint32_t bitSync[] = {0, 21120, 26400, 31680, 36960, 42240, 44880, 47520, 50160, 52800, 55440, 58080, 60720, 63360};
	uint32_t bitSyncDenseLength = bitSync[ARRAY_LEN(bitSync)-1];



	uint32_t comb[] = {0, 343200, 559680, 601920, 755040, 813120, 929280, 955680, 997920, 1003200, 1029600, 1135200, 1193280, 1240800, 1251360, 1383360, 1404480, 1483680, 1520640, 1647360, 1694880, 1800480, 1879680, 1921920, 1932480, 1958880, 2085600, 2122560, 2164800, 2180640, 2196480, 2244000, 2344320, 2428800, 2434080, 2476320, 2550240, 2872320, 3067680, 3278880, 3410880, 3669600, 3738240, 3806880, 3838560, 3944160, 3986400, 4134240, 4239840, 4297920, 4345440, 4414080, 4419360, 4593600, 4678080, 4736160, 4878720, 4894560, 5116320, 5221920, 5253600, 5290560, 5512320, 5639040, 5834400, 6019200, 6225120, 6383520, 6452160, 6494400, 6600000, 6668640, 6916800, 7138560, 7170240, 7186080, 7223040, 7275840, 7370880, 7571520, 7587360, 7597920, 7751040, 7898880, 7904160, 7930560, 8110080, 8310720, 8469120, 8500800, 8580000, 8748960, 8880960, 8954880, 8986560, 9086880, 9150240, 9176640, 9229440, 9451200, 9572640, 9625440, 9757440, 9884160, 10047840, 10142880, 10243200};
	uint32_t left[] = {4121674, 4135690, 4142026, 4144714, 4487818, 4704586, 4746826, 4899274, 4957642, 5073034, 5100106, 5141962, 5148106, 5174026, 5280202, 5337034, 5385802, 5395594, 5527690, 5548810, 5628490, 5664394, 5792266, 5839498, 5945290, 6023818, 6066634, 6077194, 6103306, 6229642, 6267466, 6309514, 6325834, 6341194, 6389002, 6488650, 6573322, 6578698, 6621130, 6694474, 7017034, 7212106, 7423114, 7556170, 7814218, 7882378, 7951498, 7983370, 8089162, 8130634, 8278858, 8384650, 8442442, 8489098, 8559178, 8563786, 8737930, 8822602, 8880778, 9023050, 9039946, 9261322, 9366922, 9398026, 9435082, 9656458, 9783562, 9979018, 10164298, 10369930, 10528522, 10596490, 10638922, 10743946, 10814026, 11061898, 11284042, 11314762, 11330506, 11367370, 11420746, 11516362, 11716426, 11731594, 11743306, 11895562, 12043210, 12048778, 12075274, 12254794, 12456010, 12613642, 12646474, 12725002, 12893770, 13025866, 13099786, 13130890, 13231882, 13295050, 13321162, 13373578, 13596106, 13717834, 13770826, 13901770, 14029258, 14192074, 14288458, 14405578, 14410186, 14411914, 14419018, 14420746, 14436106, 14438410, 14445514, 14446858, 14450122, 14451850, 14458954, 14461066, 14468170, 14470282};
	uint32_t combDenseLength = comb[ARRAY_LEN(comb)-1];

//	uint32_t right[] = {4137127, 4141927, 4143847, 4487335, 4704295, 4745767, 4899367, 4957351, 5074279, 5100199, 5142247, 5148199, 5174119, 5278759, 5338855, 5384743, 5395495, 5527399, 5549287, 5627623, 5666023, 5791591, 5839591, 5944999, 6024871, 6065383, 6077287, 6103207, 6231271, 6266599, 6309223, 6324583, 6341287, 6387943, 6489319, 6573415, 6578407, 6619879, 6695143, 7015975, 7213159, 7423015, 7555303, 7814311, 7882471, 7951399, 7983271, 8088295, 8131303, 8278567, 8384551, 8442343, 8490535, 8557735, 8564647, 8737831, 8823655, 8880295, 9023719, 9038887, 9261607, 9366247, 9398311, 9434983, 9657319, 9783655, 9979111, 10163431, 10370599, 10527271, 10596583, 10639015, 10745191, 10813159, 11061607, 11282791, 11315431, 11330599, 11367655, 11420839, 11516071, 11716135, 11732839, 11742055, 11896423, 12043303, 12049447, 12075367, 12255271, 12454567, 12614503, 12645223, 12725287, 12893863, 13026535, 13099687, 13131943, 13231591, 13295143, 13321063, 13375015, 13595815, 13717543, 13769383, 13902823, 14028967, 14193511, 14287207, 14405479, 14411239, 14413543, 14425255, 14427559, 14436391, 14438119};

//	uint32_t comb[] = {0, 84480, 168960, 253440, 337920, 422400, 506880, 591360, 675840, 760320, 844800, 865920, 887040, 908160, 929280, 950400, 971520, 992640, 1013760, 1034880, 1056000, 1077120, 1098240, 1119360, 1140480, 1161600, 1182720, 1203840, 1224960, 1246080, 1267200, 1288320, 1309440, 1330560, 1351680, 1372800, 1393920, 1415040, 1520640, 1605120, 1689600, 1774080, 1858560, 1879680, 1900800, 1921920, 2027520, 2112000, 2196480, 2280960, 2365440, 2449920, 2534400, 2618880, 2703360, 2787840, 2872320, 2956800, 3041280, 3125760, 3210240, 3231360, 3252480, 3273600, 3294720, 3315840, 3336960, 3358080, 3379200, 3400320, 3421440, 3442560, 3463680, 3484800, 3505920, 3527040, 3548160};
//	uint32_t left[] = {4121674, 4135690, 4142026, 4144714, 4487818, 4704586, 4746826, 4899274, 4957642};

	//xcorr(toDense([0 1     3     4     5     7     9]), toDense([0,1,2,4,6]))
//	uint32_t left[] = {0, 1,     3,     4,     5,     7,     9};
//	uint32_t left[] = {2,3,5,6,7,9,11};
//	uint32_t comb[] = {0,1,2,4,6};
//	uint32_t left[] = {0,1,10};
//	uint32_t comb[] = {0,1,4};

//	uint32_t offset[] = {1666732, 1681355, 1747019, 1760843, 1767563, 1781963, 1788683, 1802891, 1810187, 1824203, 1830347, 1845323, 1852619, 1866635, 1873547, 1887947, 1894667, 1908875, 2261387, 2477003, 2519435, 2673035, 2731403, 2846987, 2872907, 2915915, 2921291, 2947211, 3053195, 3110987, 3158603, 3169355, 3300299, 3321803, 3401099, 3438347, 3564299, 3612107, 3718091, 3797387, 3839627, 3849803, 3877259, 4003211, 4040459, 4082123, 4098635, 4113995, 4161611, 4261835, 4345931, 4352075, 4393739, 4467467, 4790027, 4985099, 5196683, 5328971, 5587019, 5656139, 5723915, 5756363, 5862155, 5903819, 6052235, 6157259, 6215435, 6262667, 6331979, 6336779, 6511499, 6595979, 6654347, 6796235, 6811403, 7034123, 7139723, 7171979, 7207883, 7430411, 7556555, 7751627, 7937291, 8142923, 8301515, 8370059, 8412107, 8518091, 8586635, 8834507, 9056651, 9087947, 9103307, 9141131, 9193931, 9288779, 9488843, 9504971, 9515915, 9668555, 9816971, 9822539, 9848459, 10027595, 10228811, 10387019, 10419083, 10497611, 10666763, 10798859, 10872779, 10904843, 11004491, 11068235, 11094923, 11147147, 11368715, 11490251, 11543819, 11674571, 11802059, 11965643, 12061066, 12173194, 12174922, 12178378, 12233098, 12234826, 12257482, 12259786, 12265354, 12267466, 12292810, 12295114, 12299530, 12300874, 12311434, 12313738, 12325450, 12327370, 12332938, 12335050, 12344266, 12345418, 12356170, 12357706, 12360778, 12363082, 12385162, 12386890, 12391498, 12393802, 12412810, 12414922, 12425098, 12427018, 12432778, 12434890, 12440842, 12442570, 12474058, 12476362, 12626890, 12628426, 12635530, 12637642, 12650698, 12653002, 12657418, 12659146, 12686026, 12688330, 12706954, 12709642, 12724618, 12726730, 12728074, 12729418, 12733834, 12735946, 12739978, 12742282, 12749386, 12751690, 12767626, 12771274, 12782986, 12784906, 12786058, 12788170, 12796618, 12798922, 12804490, 12806602, 12809482, 12811210, 12812170, 12814282, 12817546, 12818890, 12823114, 12824842, 12829450, 12832714, 12837130, 12838858, 12839818, 12841930, 12858250, 12860170, 12867274, 12869578, 12875530, 12877258, 12881290, 12883594, 12904714, 12906442, 12912010, 12914122, 12916618, 12918922, 12925834, 12928330, 12945994, 12947914, 12953482, 12955594, 12960010, 12961546, 12985738, 12989578, 12996490, 12998986, 13007434, 13009354, 13015306, 13017034, 13022794, 13024906, 13027402, 13029514, 13034890, 13036810, 13037962, 13040074, 13047178, 13048714, 13051786, 13053898, 13056394, 13058506, 13076554, 13078474, 13093450, 13095370, 13104778, 13105738, 13107274, 13109578, 13114570, 13118410, 13123978, 13126090, 13130698, 13132234, 13137802, 13140106, 13144138, 13146058, 13157770, 13161418, 13170058, 13172170, 13185226, 13187530, 13189834, 13192138, 13200778, 13202890, 13207306, 13208842, 13214602, 13218058, 13221130, 13222858, 13223818, 13225930, 13234570, 13236682, 13245322, 13248778, 13257994, 13259722, 13260490, 13262794, 13280650, 13282762, 13285450, 13287370, 13295818, 13298122, 13311370, 13313482, 13316746, 13318090, 13320586, 13322698, 13334410, 13336522, 13345162, 13347466, 13355914, 13358026, 13360906, 13362634, 13363786, 13365706, 13377418, 13379530, 13394506, 13396810, 13412746, 13414858, 13419274, 13421002, 13426954, 13430026, 13437130, 13439434, 13448074, 13450186, 13454218, 13455946, 13458058, 13459402, 13481866, 13483978, 13484938, 13487050, 13491082, 13494730, 13505098, 13507018, 13514506, 13516234, 13527946, 13530058, 13535818, 13538122, 13540426, 13541962, 13546378, 13548490, 13554634, 13556170, 13561930, 13564042, 13571146, 13573450, 13592458, 13594570, 13595530, 13597642, 13604746, 13606666, 13607818, 13609930, 13617034, 13619146, 13620490, 13621834, 13626442, 13628362, 13646410, 13648714, 13664650, 13666762, 13672330, 13674634, 13684426, 13686730, 13687690, 13689802, 13701514, 13703626, 13704586, 13706698, 13712266, 13715914, 13719754, 13722058, 13724362, 13726666, 13732234, 13733770, 13735882, 13737418, 13741450, 13743178, 13747594, 13750090, 13752586, 13754698, 13761802, 13763530, 13769098, 13771210, 13773706, 13775434, 13777162, 13778890, 13779850, 13781962, 13790410, 13792522, 13798282, 13800394, 13810570, 13812682, 13819786, 13821898, 13825738, 13827850, 13832458, 13834186, 13839754, 13841866, 13845898, 13848010, 13853770, 13856074, 13862986, 13864906, 13875082, 13877194, 13891978, 13893898, 13900042, 13901770, 13907722, 13909450, 13919626, 13921930, 13933642, 13935946, 13941514, 13943242, 13947274, 13949386, 13953802, 13955530, 13961098, 13963210, 13965706, 13967818, 13980874, 13983178, 13993546, 13995274, 14001418, 14003146, 14010250, 14012362, 14014858, 14016970, 14042890, 14044618, 14060938, 14063242, 14080906, 14082826, 14087050, 14089162, 14093194, 14095306, 14100874, 14103178, 14115082, 14116810, 14122378, 14124490, 14141002, 14143306, 14143882, 14145802, 14155018, 14156746, 14159242, 14161354, 14176330, 14178058, 14180938, 14183242, 14190346, 14192074, 14199754, 14201290, 14209930, 14211850, 14216266, 14217802, 14220874, 14222794, 14228746, 14230474, 14240650, 14242762, 14248330, 14250058, 14253130, 14255050};
//	uint32_t gap[] = {37666732, 37681355, 37747019, 37760843, 37767563, 37781963, 37788683, 37802891, 37810187, 37824203, 37830347, 37845323, 37852619, 37866635, 37873547, 37887947, 37894667, 37908875, 38261387, 38477003, 38519435, 38673035, 38731403, 38846987, 38872907, 38915915, 38921291, 38947211, 39053195, 39110987, 39158603, 39169355, 39300299, 39321803, 39401099, 39438347, 39564299, 39612107, 39718091, 39797387, 39839627, 39849803, 39877259, 40003211, 40040459, 40082123, 40098635, 40113995, 40161611, 40261835, 40345931, 40352075, 40393739, 40467467, 40790027, 40985099, 41196683, 41328971, 41587019, 41656139, 41723915, 41756363, 41862155, 41903819, 42052235, 42157259, 42215435, 42262667, 42331979, 42336779, 42511499, 42595979, 42654347, 42796235, 42811403, 43034123, 43139723, 43171979, 43207883, 43430411, 43556555, 43751627, 43937291, 44142923, 44301515, 44370059, 44412107, 44518091, 44586635, 44834507, 45056651, 45087947, 45103307, 45141131, 45193931, 45288779, 45488843, 45504971, 45515915, 45668555, 45816971, 45822539, 45848459, 46027595, 46228811, 46387019, 46419083, 46497611, 46666763, 46798859, 46872779, 46904843, 47004491, 47068235, 47094923, 47147147, 47368715, 47490251, 47543819, 47674571, 47802059, 47965643, 61066, 173194, 174922, 178378, 233098, 234826, 257482, 259786, 265354, 267466, 292810, 295114, 299530, 300874, 311434, 313738, 325450, 327370, 332938, 335050, 344266, 345418, 356170, 357706, 360778, 363082, 385162, 386890, 391498, 393802, 412810, 414922, 425098, 427018, 432778, 434890, 440842, 442570, 474058, 476362, 626890, 628426, 635530, 637642, 650698, 653002, 657418, 659146, 686026, 688330, 706954, 709642, 724618, 726730, 728074, 729418, 733834, 735946, 739978, 742282, 749386, 751690, 767626, 771274, 782986, 784906, 786058, 788170, 796618, 798922, 804490, 806602, 809482, 811210, 812170, 814282, 817546, 818890, 823114, 824842, 829450, 832714, 837130, 838858, 839818, 841930, 858250, 860170, 867274, 869578, 875530, 877258, 881290, 883594, 904714, 906442, 912010, 914122, 916618, 918922, 925834, 928330, 945994, 947914, 953482, 955594, 960010, 961546, 985738, 989578, 996490, 998986, 1007434, 1009354, 1015306, 1017034, 1022794, 1024906, 1027402, 1029514, 1034890, 1036810, 1037962, 1040074, 1047178, 1048714, 1051786, 1053898, 1056394, 1058506, 1076554, 1078474, 1093450, 1095370, 1104778, 1105738, 1107274, 1109578, 1114570, 1118410, 1123978, 1126090, 1130698, 1132234, 1137802, 1140106, 1144138, 1146058, 1157770, 1161418, 1170058, 1172170, 1185226, 1187530, 1189834, 1192138, 1200778, 1202890, 1207306, 1208842, 1214602, 1218058, 1221130, 1222858, 1223818, 1225930, 1234570, 1236682, 1245322, 1248778, 1257994, 1259722, 1260490, 1262794, 1280650, 1282762, 1285450, 1287370, 1295818, 1298122, 1311370, 1313482, 1316746, 1318090, 1320586, 1322698, 1334410, 1336522, 1345162, 1347466, 1355914, 1358026, 1360906, 1362634, 1363786, 1365706, 1377418, 1379530, 1394506, 1396810, 1412746, 1414858, 1419274, 1421002, 1426954, 1430026, 1437130, 1439434, 1448074, 1450186, 1454218, 1455946, 1458058, 1459402, 1481866, 1483978, 1484938, 1487050, 1491082, 1494730, 1505098, 1507018, 1514506, 1516234, 1527946, 1530058, 1535818, 1538122, 1540426, 1541962, 1546378, 1548490, 1554634, 1556170, 1561930, 1564042, 1571146, 1573450, 1592458, 1594570, 1595530, 1597642, 1604746, 1606666, 1607818, 1609930, 1617034, 1619146, 1620490, 1621834, 1626442, 1628362, 1646410, 1648714, 1664650, 1666762, 1672330, 1674634, 1684426, 1686730, 1687690, 1689802, 1701514, 1703626, 1704586, 1706698, 1712266, 1715914, 1719754, 1722058, 1724362, 1726666, 1732234, 1733770, 1735882, 1737418, 1741450, 1743178, 1747594, 1750090, 1752586, 1754698, 1761802, 1763530, 1769098, 1771210, 1773706, 1775434, 1777162, 1778890, 1779850, 1781962, 1790410, 1792522, 1798282, 1800394, 1810570, 1812682, 1819786, 1821898, 1825738, 1827850, 1832458, 1834186, 1839754, 1841866, 1845898, 1848010, 1853770, 1856074, 1862986, 1864906, 1875082, 1877194, 1891978, 1893898, 1900042, 1901770, 1907722, 1909450, 1919626, 1921930, 1933642, 1935946, 1941514, 1943242, 1947274, 1949386, 1953802, 1955530, 1961098, 1963210, 1965706, 1967818, 1980874, 1983178, 1993546, 1995274, 2001418, 2003146, 2010250, 2012362, 2014858, 2016970, 2042890, 2044618, 2060938, 2063242, 2080906, 2082826, 2087050, 2089162, 2093194, 2095306, 2100874, 2103178, 2115082, 2116810, 2122378, 2124490, 2141002, 2143306, 2143882, 2145802, 2155018, 2156746, 2159242, 2161354, 2176330, 2178058, 2180938, 2183242, 2190346, 2192074, 2199754, 2201290, 2209930, 2211850, 2216266, 2217802, 2220874, 2222794, 2228746, 2230474, 2240650, 2242762, 2248330, 2250058, 2253130, 2255050};

	uint32_t prnCodeStart, bitSyncStart;

	int32_t scorePrn, scoreBitSync;

	prnCodeStart = pop_correlate(data, size, comb, ARRAY_LEN(comb), &scorePrn);

	printf("score1: %d\r\n", scorePrn);


	//uint32_t cooked[] = {0, 2640, 5280, 7920, 10560, 13200, 15840, 18480, 21120, 23760, 26400, 29040, 31680, 34320, 36960, 39600, 42240, 44880, 47520, 50160, 52800, 55440, 58080, 60720, 63360, 66000, 68640, 71280};


	if( prnCodeStart != 0 )
	{

		uint32_t i, start, end;
		short flag1 = 0, flag2 = 0;
		for(i = 1; i < size; i++)
		{
			if( data[i] > (prnCodeStart+combDenseLength) && !flag1 )
			{
				flag1 = 1;
				start = i-1;
			}

			if( data[i] > (prnCodeStart+combDenseLength+bitSyncDenseLength) && !flag2 )
			{
				flag2 = 1;
				end = MIN(i+1, size-1);
			}
		}

		if( !flag1 && !flag2 )
		{
			printf("data was not longer than comb + bit sync code\r\n");
			return;
		}


//		printf("start end %d %d\r\n", start, end);

		bitSyncStart = pop_correlate(data+start, (end-start), bitSync, ARRAY_LEN(bitSync), &scoreBitSync);

		printf("score2: %d\r\n", scoreBitSync);


		uint8_t dataRx[2];

		printf("Bit sync method:\r\n");
		pop_data_demodulate(data, size, bitSyncStart+bitSyncDenseLength, dataRx, 2, (scorePrn<0?1:0));

//		printf("PRN sync method:\r\n");
//		pop_data_demodulate(data, size, prnCodeStart+combDenseLength+bitSyncDenseLength, dataRx, 2);



		printf("answer answer2 %u %u\r\n", prnCodeStart, bitSyncStart);



//		for(i=0;i<size;i++)
//		{
//			printf("%d, ", data[i]);
//		}





	//	pop_data_demodulate(cooked, ARRAY_LEN(cooked), 15);
//		pop_data_demodulate(data, size, answer+combDenseLength);
	}

	printf("\r\nMaxScore: %u\r\n", prnCodeStart);

}


} //namespace

